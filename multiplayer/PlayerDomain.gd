class_name PlayerDomain
extends Node

#the instance of player in the "world"
#we must add the operation zone because
#it's supposed to be private, and sending
#data with rpc to the main field
#about writing a number would be useless

#the operation zone should have a max size
#to leave room for the other player's domain

# an operation is abstract (already done), but
# the ui should be abstract too
# because some operations need a different display
# (fractions for instance)




#Signals
signal attack(character, threat_type, atk_hp, power, delay, side_effects)
signal end(id_domain)
signal new_money_value(money)
signal first_threat_ref_changed()

#Enums
enum BUYING_OP_ATTEMPT_RESULT{FREE_SPACE, NO_SPACE, NO_MONEY, ERROR}

#Consts
const STANCES = {ATTACK = 1, DEFENSE = 2, BONUS = 3}
const THREAT_TYPES = {REGULAR = 1, FAST = 2, STRONG = 3}

#Exported vars

#Public vars

#Private vars
var rng = RandomNumberGenerator.new()
var current_seed = rng.seed

var id_character: int

var hp_current: int
var hp_max: int

var stance: int
var atk_type: int
var malus_level: int
var operation_preference: Dictionary
var difficulty_preference: Dictionary

#custom object to store the list of operation types
var pattern: Pattern
# counts the remainder of rounding potential 
# when incantations are completed
var reliquat: float

var defense_power: ReliquatNumber
var black_blanco_bonus: bool
var meteor_sent := 0
var threat_count: int

#the threat with least remaining time
var first_threat: Threat

#nb of new operations generated between 2 rounds.
var nb_new_operations: int
var money: int
var money_per_round: int
var base_swap_price: int
var swap_price: int
var base_erase_price: int
var erase_price: int

var operations_generator: Calcul_Factory
var operations_stats: Array
#list of operations to answer, generated by calcul_generator
var operations: Array

var points: int

var base_projectile_start: Vector2


#Onready vars
onready var char_icon = $margin_c/vboxc/main_data/char/char_icon
onready var hp_bar = $margin_c/vboxc/main_data/VBoxContainer/hp_bar
onready var stance_display = $margin_c/vboxc/hbox2/vbox/stance
onready var points_label = $margin_c/vboxc/hbox2/vbox/points
onready var chain_label = $margin_c/vboxc/hbox2/vbox/chain
onready var power_label = $margin_c/vboxc/hbox2/vbox/power

onready var nb_calculs_label = $margin_c/vboxc/hbox2/vbox/total_operations
onready var good_answers_label = $margin_c/vboxc/hbox2/vbox/right_answers
onready var time_calcul_label = $margin_c/vboxc/hbox2/vbox/speed_answer

onready var atk_progress = $margin_c/vboxc/main_data/VBoxContainer/CenterContainer/incantation_progress

onready var terrain = $margin_c/vboxc/hbox2/Terrain

onready var collision_zone_to_enemy = $margin_c/vboxc/hbox2/Terrain/A2D_send_meteor

#Functions

#id character loaded from gamestate singleton.

func create():
	pass
	
#input given here.
#we only send data when an operation is validated or cancelled,
#because it affects the domain's data.
func process(delta):
	if (is_network_master()):
		pass
	else:
		pass
#Helpers

#Getters/Setters

#Event handlers
